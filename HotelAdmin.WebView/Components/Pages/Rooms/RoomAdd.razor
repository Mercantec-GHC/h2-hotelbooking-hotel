@page "/rooms/add/{Id}"
@attribute [Authorize(Roles = "HotelAdmin")]
@inject NavigationManager NavigationManager
@inject ApiService ApiService

<PageTitle>Add Room</PageTitle>

<Card>
    <EditForm Model="roomDTO" OnValidSubmit="OnShowModalClick" novalidate>
        <DataAnnotationsValidator />

        <CardHeader>
            <h1>Add Hotel</h1>
        </CardHeader>
        <CardBody>
            <p>Add Hotel</p>

            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="mb-3">
                        <label for="nameInput" class="form-label fw-bold">Name:</label>
                        <TextInput @bind-Value="@roomDTO.Name" Id="nameInput" Placeholder="Enter Hotel Name" />
                        <ValidationMessage For="@(() => roomDTO.Name)" />
                    </div>
                    <div>
                        <label for="descriptionInput" class="form-label fw-bold">Description:</label>
                        <TextAreaInput @bind-Value="roomDTO.Description" class="form-control mb-3" Placeholder="Enter Hotel Name" Id="descriptionInput" rows="3"></TextAreaInput>
                        <ValidationMessage For="@(() => roomDTO.Description)" />
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="mb-3">
                        <label for="countryPrice" class="form-label fw-bold">Daily Price:</label>
                        <CurrencyInput TValue="float" @bind-Value="@roomDTO.DailyPrice" Locale="de-DE" EnableMinMax="true" Min="50" Max="1000000" Id="countryPrice" Placeholder="Enter Daily Price" />
                        <ValidationMessage For="@(() => roomDTO.DailyPrice)" />
                    </div>
                </div>
            </div>

            <Modal @ref="modal" Title="Confirm" IsVerticallyCentered="true">
                <BodyTemplate>
                    <p class="m-0"><b>Name:</b> @roomDTO.Name</p>
                    <p class="m-0"><b>Description:</b> @roomDTO.Description</p>
                    <p class="m-0"><b>Daily Price:</b> @roomDTO.DailyPrice €</p>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="HandleValidSubmit">Confirm</Button>
                </FooterTemplate>
            </Modal>

        </CardBody>
        <CardFooter>
            <div class="d-flex justify-content-end">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Add Hotel</Button>
            </div>
        </CardFooter>
    </EditForm>
</Card>

@code {
    [Parameter] public string Id { get; set; }
    private CreateRoomDTO roomDTO = new CreateRoomDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hotel = await ApiService.GetHotel(Id);
            if (hotel == null) NavigationManager.NavigateTo("/hotels");
            else
            {
                roomDTO.HotelID = hotel.ID;
                StateHasChanged();
            }
        }
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private async Task HandleValidSubmit()
    {
        var result = await ApiService.CreateRoom(roomDTO);
        if (result != null) NavigationManager.NavigateTo($"/room/{result.Id}");
        else await modal.HideAsync();
    }
}
