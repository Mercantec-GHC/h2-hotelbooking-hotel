@page "/room/{Id}"
@attribute [Authorize(Roles = "HotelWorker")]
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Get Room</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (room != null)
        {
            <Card>
                <CardHeader>
                    <h1>Get Room</h1>
                </CardHeader>
                <CardBody>
                    <p>@room.Id</p>
                    <p>@room.Name</p>
                    <p>@room.Description</p>
                    <p>@room.DailyPrice</p>
                </CardBody>
                <CardFooter>
                    <AuthorizeView Roles="HotelAdmin">
                        <Authorized Context="adminContext">
                            <Button Type="ButtonType.Button"
                                    Class="ms-3"
                                    Color="ButtonColor.Danger"
                                    @onclick="DeleteConfirmModalShow">
                                Delete
                            </Button>
                        </Authorized>
                    </AuthorizeView>
                </CardFooter>
            </Card>
            <Modal @ref="deleteConfirmModal" Title="Please confirm">
                <BodyTemplate>
                    Are you sure you want to delete this room?
                    @if (warningVisible)
                    {
                        <div class="validation-message">Failed to delete room!</div>
                    }
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="DeleteConfirmModalHide">Close</Button>
                    <Button Color="ButtonColor.Danger" @onclick="HandleDeletion">Delete</Button>
                </FooterTemplate>
            </Modal>
        }
        else
        {
            <div class="row justify-content-center mt-5">
                <div class="col-auto fw-bold">
                    <span class="spinner-border" style="width: 3rem; height: 3rem;" aria-hidden="true"></span>
                    <span role="status" style="font-size: 3rem;">Loading...</span>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public string? Id { get; set; }
    private RoomResult room;
    private Modal deleteConfirmModal;
    private bool warningVisible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            room = await ApiService.GetRoom(Id);
            if (room == null) NavigationManager.NavigateTo($"/hotel/{room.HotelId}");
            else StateHasChanged();
        }
    }


    private async Task HandleDeletion()
    {
        var response = await ApiService.DeleteRoom(Id);

        if (response == true)
        {
            NavigationManager.NavigateTo($"/hotel/{room.HotelId}", true);
        }
        else
        {
            warningVisible = true;
        }
    }

    private async Task DeleteConfirmModalShow()
    {
        await deleteConfirmModal?.ShowAsync();
    }

    private async Task DeleteConfirmModalHide()
    {
        await deleteConfirmModal?.HideAsync();
    }
}